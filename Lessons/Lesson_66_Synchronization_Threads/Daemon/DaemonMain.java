package Daemon;

public class DaemonMain {
    // Daemon thread - служебный поток
    // void setDaemon() - для превращения потока в daemon  и наоборот
    // boolean isDaemon() -   проверяет статус
    public static void main(String[] args) {


        DaemonThreadExample example1 = new DaemonThreadExample();
        DaemonThreadExample example2 = new DaemonThreadExample();

        example1.setDaemon(true);

        example1.start();
        example2.start();
    }
    /*
    Демон-поток (daemon thread) - это специальный тип потока в Java, который работает в фоновом режиме и завершает
    свою работу, как только все недемонические потоки завершают свое выполнение. Демон-потоки используются,
    чтобы выполнять фоновые задачи в приложении и могут быть полезны в различных сценариях.
    Вот несколько ключевых особенностей демон-потоков:

    1. Завершение по завершению других потоков: Демон-потоки автоматически завершают свою работу, когда все
    недемонические потоки завершают свое выполнение. Это означает, что они не могут завершить выполнение приложения,
    оставив его в рабочем состоянии.

    2. Задачи фонового выполнения: Демон-потоки часто используются для выполнения задач, которые не являются критически
    важными для приложения, и могут выполняться в фоновом режиме. Примерами таких задач могут быть сборка мусора,
    логирование, мониторинг или обновление данных.

    Создание демон-потока: Для создания демон-потока в Java, установите его флаг setDaemon(true) перед запуском потока.
    Например:


     Thread daemonThread = new Thread(() -> {
            // Код задачи демон-потока
        });
        daemonThread.setDaemon(true);
        daemonThread.start();

       Пример использования: Демон-потоки полезны в сценариях, где выполнение задачи не является обязательным для
       завершения работы приложения. Они могут быть полезны, например, при выполнении периодической очистки временных
       файлов или обновления кэшированных данных.

       Важно помнить, что демон-потоки должны быть созданы и настроены перед их запуском, их флаг setDaemon(true) не
       может быть изменен после того, как поток был запущен. Также следует быть осторожным при работе с демон-потоками,
       поскольку они могут быть завершены внезапно, если все недемонические потоки завершают выполнение,
       что может привести к нежелательным последствиям в приложении.
     */
}
